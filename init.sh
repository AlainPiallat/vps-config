#!/bin/bash
# =============================================================================
# init.sh - VPS Environment Initialization
# =============================================================================

set -e

# Load environment variables
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
if [ ! -f "$SCRIPT_DIR/.env" ]; then
    echo "ERROR: .env file not found"
    echo "Please create a .env file from .env.example"
    exit 1
fi

source "$SCRIPT_DIR/.env"

if [ "$EUID" -ne 0 ]; then 
    echo "WARNING: This script must be run as root"
    echo "Usage: sudo ./init.sh"
    exit 1
fi

echo "VPS Server Initialization"
echo "========================="
echo ""

#----------------------------------------------------------------
# Create VPS Config Directory
#----------------------------------------------------------------
echo "Creating /etc/vps-config directory..."
mkdir -p /etc/vps-config
chmod 755 /etc/vps-config
echo "/etc/vps-config directory created"

#----------------------------------------------------------------
# Utility for idempotent execution
#----------------------------------------------------------------

STATE_FILE="/etc/vps-config/.init_state"

mark_step_completed() {
    echo "$1" >> "$STATE_FILE"
}

is_step_completed() {
    grep -qx "$1" "$STATE_FILE" 2>/dev/null
}

#----------------------------------------------------------------
# System Update
#----------------------------------------------------------------
echo "Updating system..."
apt update && apt upgrade -y

#----------------------------------------------------------------
# Install Required Tools
#----------------------------------------------------------------

echo ""
echo "Installing base tools..."
apt install -y curl wget git vim htop tree unzip fail2ban ufw
echo "Base tools installed"

#----------------------------------------------------------------
# User Creation
#----------------------------------------------------------------

if [ -e /etc/passwd ] && grep -q "$USER_NAME" /etc/passwd; then
    echo "User '$USER_NAME' already created, skipping..."
else
    echo ""
    echo "Configuring user..."
    if ! id -u $USER_NAME &>/dev/null; then
        adduser --gecos "" $USER_NAME
        usermod -aG sudo $USER_NAME
        echo "User '$USER_NAME' created and added to sudo group"
    else
        echo "User '$USER_NAME' already exists"
    fi
fi

#----------------------------------------------------------------
# Create Port Registry File
#----------------------------------------------------------------

if [ -e /etc/vps-config/.port ]; then
    echo "Port registry file already created, updating..."

    sed -i -E "s/[0-9]+ (tcp|udp) SSH/${SSH_PORT} tcp SSH/" /etc/vps-config/.port
    sed -i -E "s/[0-9]+ (tcp|udp) HTTP/${HTTP_PORT} tcp HTTP/" /etc/vps-config/.port
    sed -i -E "s/[0-9]+ (tcp|udp) HTTPS/${HTTPS_PORT} tcp HTTPS/" /etc/vps-config/.port
    sed -i -E "s/[0-9]+ (tcp|udp) WireGuard/${WIREGUARD_PORT} udp WireGuard/" /etc/vps-config/.port

    echo "Port registry file updated at /etc/vps-config/.port"
else
    echo ""
    echo "Creating port registry file..."
    cat > /etc/vps-config/.port << EOF
# VPS Port Configuration Example
# This file is automatically generated by init.sh and stored in /etc/vps-config/.port
# Format: <port> <protocol> <service_name>
#
# The update-ufw.sh script reads this file to configure UFW firewall rules
#
# Rules:
# - Lines starting with # are comments (ignored)
# - Empty lines are ignored
# - Service names can contain spaces
# - Protocol must be: tcp, udp, or both (tcp/udp)
${SSH_PORT} tcp SSH
${HTTP_PORT} tcp HTTP
${HTTPS_PORT} tcp HTTPS
${WIREGUARD_PORT} udp WireGuard
EOF
    chmod 640 /etc/vps-config/.port
    chown root:root /etc/vps-config/.port
    echo "Port registry file created at /etc/vps-config/.port"
fi

#----------------------------------------------------------------
# Firewall Configuration
#----------------------------------------------------------------

echo ""
echo "Configuring UFW firewall..."

sh "$SCRIPT_DIR/scripts/update-ufw.sh"
echo "UFW firewall configured"

#----------------------------------------------------------------
# Fail2Ban Configuration
#----------------------------------------------------------------

if [ -e /etc/fail2ban/jail.local ]; then
    echo "Fail2Ban already configured, skipping..."
else
    echo ""
    echo "Configuring Fail2Ban..."
    cat > /etc/fail2ban/jail.local << EOF
[DEFAULT]
bantime = ${FAIL2BAN_BANTIME}
findtime = ${FAIL2BAN_FINDTIME}
maxretry = ${FAIL2BAN_MAXRETRY}

[sshd]
enabled = true
port = ${SSH_PORT}
filter = sshd
logpath = /var/log/auth.log
EOF

    systemctl restart fail2ban
    systemctl enable fail2ban
    echo "Fail2Ban configured and enabled"
fi

#----------------------------------------------------------------
# SSH Configuration
#----------------------------------------------------------------
echo ""
# Fichier de configuration SSH
SSH_CONFIG="/etc/ssh/sshd_config"

# 1. Sauvegarde du fichier original
echo "Sauvegarde de $SSH_CONFIG..."
cp "$SSH_CONFIG" "${SSH_CONFIG}.bak-$(date +%Y%m%d)"

# 2. Modification sécurisée de sshd_config avec sed (version robuste)
echo "Modification de $SSH_CONFIG..."
# Port SSH
sed -i -E "s/^#?Port [0-9]+/Port $SSH_PORT/" "$SSH_CONFIG"
# Désactiver l'accès root
sed -i -E "s/^#?PermitRootLogin .+/PermitRootLogin no/" "$SSH_CONFIG"
# Désactiver l'authentification par mot de passe
sed -i -E "s/^#?PasswordAuthentication .+/PasswordAuthentication no/" "$SSH_CONFIG"
# Activer l'authentification par clé
sed -i -E "s/^#?PubkeyAuthentication .+/PubkeyAuthentication yes/" "$SSH_CONFIG"

# 3. Configuration du répertoire .ssh pour l'utilisateur
echo "Configuration du répertoire .ssh pour $USER_NAME..."
mkdir -p "/home/$USER_NAME/.ssh"
chmod 700 "/home/$USER_NAME/.ssh"
chown -R "$USER_NAME:$USER_NAME" "/home/$USER_NAME/.ssh"

# 4. Ajout de la clé publique
echo "Ajout de la clé publique SSH..."
cat > "/home/$USER_NAME/.ssh/authorized_keys" <<< "$SSH_PUBLIC_KEY"
chmod 600 "/home/$USER_NAME/.ssh/authorized_keys"
chown "$USER_NAME:$USER_NAME" "/home/$USER_NAME/.ssh/authorized_keys"

# 5. Création du répertoire /run/sshd si nécessaire
echo "Vérification de /run/sshd..."
mkdir -p /run/sshd
chmod 0755 /run/sshd

# 6. Test de la configuration et redémarrage du service
echo "Test de la configuration SSH..."
if sshd -t; then
    echo "Configuration valide. Redémarrage du service SSH..."
    systemctl daemon-reload
    systemctl restart ssh
    systemctl enable ssh
    echo "SSH configuré pour l'utilisateur '$USER_NAME' sur le port $SSH_PORT."
else
    echo "ERREUR : La configuration SSH est invalide. Restauration de la sauvegarde..."
    cp "${SSH_CONFIG}.bak-$(date +%Y%m%d)" "$SSH_CONFIG"
    exit 1
fi

#----------------------------------------------------------------
# Docker Installation
#----------------------------------------------------------------

if [ -e /usr/bin/docker ]; then
    echo "Docker already installed, skipping..."
else
    echo ""
    echo "Installing Docker..."

    # Remove old versions
    apt remove -y docker docker.io docker-engine containerd runc 2>/dev/null || true

    # Install dependencies
    apt install -y apt-transport-https ca-certificates gnupg lsb-release

    # Add Docker GPG key
    curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg

    # Add Docker repository
    echo "deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null

    # Install Docker
    apt update
    apt install -y docker-ce docker-ce-cli containerd.io docker-compose-plugin

    # Add user to docker group
    usermod -aG docker $USER_NAME

    # Start Docker
    systemctl start docker
    systemctl enable docker
    echo "Docker installed and started"
fi

#----------------------------------------------------------------
# Docker Compose Standalone Installation
#----------------------------------------------------------------

if [ -e /usr/local/bin/docker-compose ]; then
    echo "Docker Compose already installed, skipping..."
else
    echo ""
    echo "Installing Docker Compose..."
    curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
    chmod +x /usr/local/bin/docker-compose

    # Verification
    docker --version
    docker-compose --version
    echo "Docker Compose installed"
fi

#----------------------------------------------------------------
# WireGuard Installation
#----------------------------------------------------------------

echo ""
echo "Installing WireGuard..."
apt install -y wireguard wireguard-tools resolvconf
echo "WireGuard installed"

#----------------------------------------------------------------
# WireGuard Keys Generation
#----------------------------------------------------------------

if is_step_completed "wireguard_keys_generated"; then
    echo "WireGuard keys already generated, skipping..."
else
    echo ""
    echo "Generating WireGuard keys..."
    cd /etc/wireguard

    # Server keys
    wg genkey | tee server_private.key | wg pubkey | tee server_public.key
    chmod 600 server_private.key

    # Client laptop keys
    wg genkey | tee client_laptop_private.key | wg pubkey | tee client_laptop_public.key
    chmod 600 client_laptop_private.key

    # Client phone keys
    wg genkey | tee client_phone_private.key | wg pubkey | tee client_phone_public.key
    chmod 600 client_phone_private.key

    SERVER_PRIVATE_KEY=$(cat server_private.key)
    SERVER_PUBLIC_KEY=$(cat server_public.key)
    CLIENT_LAPTOP_PRIVATE=$(cat client_laptop_private.key)
    CLIENT_LAPTOP_PUBLIC=$(cat client_laptop_public.key)
    CLIENT_PHONE_PRIVATE=$(cat client_phone_private.key)
    CLIENT_PHONE_PUBLIC=$(cat client_phone_public.key)

    echo "WireGuard keys generated"

    mark_step_completed "wireguard_keys_generated"
fi

#----------------------------------------------------------------
# WireGuard Server Configuration
#----------------------------------------------------------------

if is_step_completed "wireguard_configured"; then
    echo "WireGuard already configured, skipping..."
else
    echo ""
    echo "Configuring WireGuard server..."

    # Enable IP forwarding
    if grep -q "^#net.ipv4.ip_forward=1" /etc/sysctl.conf; then
        sed -i 's/^#net.ipv4.ip_forward=1/net.ipv4.ip_forward=1/' /etc/sysctl.conf
    elif ! grep -q "^net.ipv4.ip_forward=1" /etc/sysctl.conf; then
        echo "net.ipv4.ip_forward = 1" >> /etc/sysctl.conf
    fi

    sysctl -p

    # Find main network interface
    MAIN_INTERFACE=$(ip route | grep default | awk '{print $5}')
    echo "Detected network interface: $MAIN_INTERFACE"

    # Get public IP
    if [ "$FETCH_IPV4_ONLY" ]; then
        SERVER_IP=$(curl -4 -s ifconfig.me)
    else
        SERVER_IP=$(curl -s ifconfig.me)
    fi
    if echo "$SERVER_IP" | grep -E '^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$'; then
        echo "IPv4 : $SERVER_IP"
    else
        echo "IPv6 : $SERVER_IP"
        SERVER_IP="[$SERVER_IP]"
    fi

    if [ -f "/etc/wireguard/wg0.conf" ]; then
        echo "WireGuard configuration file already exists, skipping creation..."
    else
        echo "Creating WireGuard configuration file..."

        # Create WireGuard server configuration
        cat > /etc/wireguard/wg0.conf << EOF
[Interface]
Address = ${VPN_SERVER_IP}/24
ListenPort = ${WIREGUARD_PORT}
PrivateKey = ${SERVER_PRIVATE_KEY}
PostUp = iptables -A FORWARD -i wg0 -j ACCEPT; iptables -t nat -A POSTROUTING -o ${MAIN_INTERFACE} -j MASQUERADE
PostDown = iptables -D FORWARD -i wg0 -j ACCEPT; iptables -t nat -D POSTROUTING -o ${MAIN_INTERFACE} -j MASQUERADE

# Client: laptop
[Peer]
PublicKey = ${CLIENT_LAPTOP_PUBLIC}
AllowedIPs = ${VPN_CLIENT_LAPTOP_IP}/32

# Client: phone
[Peer]
PublicKey = ${CLIENT_PHONE_PUBLIC}
AllowedIPs = ${VPN_CLIENT_PHONE_IP}/32
EOF

        chmod 600 /etc/wireguard/wg0.conf

        # Start WireGuard
        systemctl start wg-quick@wg0
        systemctl enable wg-quick@wg0

        echo "WireGuard server configured and started"
    fi

    mark_step_completed "wireguard_configured"
fi

#----------------------------------------------------------------
# Client Configuration Files Creation
#----------------------------------------------------------------
if is_step_completed "wireguard_clients_created"; then
    echo "WireGuard client configurations already created, skipping..."
else
    echo ""
    echo "Creating client configurations..."

    # Laptop configuration
    cat > /etc/wireguard/client_laptop.conf << EOF
[Interface]
Address = ${VPN_CLIENT_LAPTOP_IP}/24
PrivateKey = ${CLIENT_LAPTOP_PRIVATE}
DNS = 1.1.1.1, 1.0.0.1

[Peer]
PublicKey = ${SERVER_PUBLIC_KEY}
Endpoint = ${SERVER_IP}:${WIREGUARD_PORT}
AllowedIPs = ${VPN_SUBNET}
PersistentKeepalive = 25
EOF

    chmod 600 /etc/wireguard/client_laptop.conf

    # Phone configuration
    cat > /etc/wireguard/client_phone.conf << EOF
[Interface]
Address = ${VPN_CLIENT_PHONE_IP}/24
PrivateKey = ${CLIENT_PHONE_PRIVATE}
DNS = 1.1.1.1, 1.0.0.1

[Peer]
PublicKey = ${SERVER_PUBLIC_KEY}
Endpoint = ${SERVER_IP}:${WIREGUARD_PORT}
AllowedIPs = ${VPN_SUBNET}
PersistentKeepalive = 25
EOF

    chmod 600 /etc/wireguard/client_phone.conf

    echo "Client configurations created"

    mark_step_completed "wireguard_clients_created"
fi

#----------------------------------------------------------------
# Status Verification
#----------------------------------------------------------------
echo ""
echo "Verifying WireGuard status..."
wg show

#----------------------------------------------------------------
# Transfer setup scripts and files to user
#----------------------------------------------------------------

echo ""
echo "Transferring setup scripts and files to user $USER_NAME..."

# Copy all scripts from scripts/ directory
for script in "$SCRIPT_DIR/scripts"/*.sh; do
    if [ -f "$script" ]; then
        script_name=$(basename "$script")
        cp "$script" "/home/$USER_NAME/$script_name"
        chmod +x "/home/$USER_NAME/$script_name"
        chown $USER_NAME:$USER_NAME "/home/$USER_NAME/$script_name"
        echo "  - Copied $script_name"
    fi
done

# Copy environment file
cp "$SCRIPT_DIR/.env" /home/$USER_NAME/.env
chown $USER_NAME:$USER_NAME /home/$USER_NAME/.env

echo "Transfer complete"

#----------------------------------------------------------------
# Copy configuration files to /etc/vps-config
#----------------------------------------------------------------

echo ""
echo "Copying configuration files to /etc/vps-config..."
cp "$SCRIPT_DIR/.env" /etc/vps-config/.env
cp "$SCRIPT_DIR/scripts/update-ufw.sh" /etc/vps-config/update-ufw.sh
chmod 600 /etc/vps-config/.env
chmod 755 /etc/vps-config/update-ufw.sh
echo "Configuration files copied to /etc/vps-config"

#----------------------------------------------------------------
# Summary
#----------------------------------------------------------------
echo ""
echo "=========================================="
echo "INITIALIZATION COMPLETED"
echo "=========================================="
echo ""
echo "Configuration summary:"
echo ""
echo "User created:         $USER_NAME (with sudo)"
echo "Docker:               Installed"
echo "WireGuard:            Installed and active"
echo "Firewall:             Configured"
echo "Fail2Ban:             Active"
echo "SSH:                  Public key only"
echo ""
echo "VPN Network:"
echo "Server:               ${VPN_SERVER_IP}"
echo "Client laptop:        ${VPN_CLIENT_LAPTOP_IP}"
echo "Client phone:         ${VPN_CLIENT_PHONE_IP}"
echo "Subnet:               ${VPN_SUBNET}"
echo ""
echo "Client configurations available in:"
echo "/etc/wireguard/client_laptop.conf"
echo "/etc/wireguard/client_phone.conf"
echo ""
echo "=========================================="
echo "NEXT STEPS"
echo "=========================================="
echo ""
echo "1. Retrieve VPN configurations:"
echo "   cat /etc/wireguard/client_laptop.conf"
echo "   cat /etc/wireguard/client_phone.conf"
echo ""
echo "2. Switch to user $USER_NAME:"
echo "   su - $USER_NAME"
echo ""
echo "3. Run the Docker configuration script:"
echo "   ./setup.sh"
echo ""
echo "=========================================="